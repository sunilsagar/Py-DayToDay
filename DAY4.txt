D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import random
>>> out = []
>>> for i in range(10):
...     out.append( random.randint(10,100) )
...
>>> out
[77, 90, 14, 52, 76, 42, 27, 68, 78, 31]
>>> out = [ random.randint(10,100) for i in range(10)]
>>> out
[34, 56, 54, 98, 89, 50, 46, 69, 81, 61]
>>> s = sorted(out)
>>> s
[34, 46, 50, 54, 56, 61, 69, 81, 89, 98]
>>> sorted(out, reverse=True)
[98, 89, 81, 69, 61, 56, 54, 50, 46, 34]
>>> ls = [ 'a', 'aaa', 'xy', 'c']
>>> sorted(ls)
['a', 'aaa', 'c', 'xy']
>>> help(sorted)
Help on built-in function sorted in module builtins:

sorted(iterable, /, *, key=None, reverse=False)
    Return a new list containing all items from the iterable in ascending order.

    A custom key function can be supplied to customize the sort order, and the
    reverse flag can be set to request the result in descending order.

>>> def p(e):
...     return len(e)
...
>>> sorted(ls, key=p)
['a', 'c', 'xy', 'aaa']
>>> p
<function p at 0x000000E9E3A06708>
>>> p('a')
1
>>> type(p)
<class 'function'>
>>> sorted(ls, key=lambda e: len(e))
['a', 'c', 'xy', 'aaa']
>>> f = lambda e: len(e)
>>> f('a')
1
>>> add1 = lambda x,y=20: x+y
>>> add1(20)
40
>>> add1(20,30)
50
>>> type(add1)
<class 'function'>
>>> [p(i) for i in ls]
[1, 3, 2, 1]
>>> sorted([1, 3, 2, 1])
[1, 1, 2, 3]
>>> ls = [ 'a', 'aaa', 'xy', 'c']
>>> d = {'nok': 20, 'ok': 2}
>>> sorted(d)
['nok', 'ok']
>>> def p1(k):
...     return d[k]
...
>>> sorted(d, key=p1)
['ok', 'nok']
>>> sorted(d, key=lambda k: d[k])
['ok', 'nok']
>>> lsw = [('abc', 20), ('xyz', 2)]
>>> sorted(lsw)
[('abc', 20), ('xyz', 2)]
>>> (1,2) < (1,3)
True
>>> (2,3) < (1,2)
False
>>> def p2(t):
...     return t[1]
...
>>> sorted(lsw, key=p2)
[('xyz', 2), ('abc', 20)]
>>> sorted(lsw, key=lambda t: t[1])
[('xyz', 2), ('abc', 20)]
>>> covid = {'usa': { '#+caseInM': 3.5, 'testing' : 45 } , 'india':
...  { '#+caseInM': 1.8, 'testing' : 25 }}
>>> sorted(covid)
['india', 'usa']
>>> def p3(k):
...     return covid[k]['#+caseInM']
...
>>> p3('usa')
3.5
>>> sorted(covid, key=p3)
['india', 'usa']
>>> sorted(covid, key=lambda k: covid[k]['#+caseInM'])
['india', 'usa']
>>> covid
{'usa': {'#+caseInM': 3.5, 'testing': 45}, 'india': {'#+caseInM': 1.8, 'testing'
: 25}}
>>> covid['usa']
{'#+caseInM': 3.5, 'testing': 45}
>>> covid.values()
dict_values([{'#+caseInM': 3.5, 'testing': 45}, {'#+caseInM': 1.8, 'testing': 25
}])
>>> covid['usa']['#+caseInM']
3.5
>>> k = 'usa'
>>> covid[k]['#+caseInM']
3.5
>>> def p3(k):
...     return covid[k]['#+caseInM']
...
>>> p3('usa')
3.5
>>> p3('india')
1.8
>>> sorted(covid, key=p3)
['india', 'usa']
>>> sorted(covid, key=lambda k: covid[k]['#+caseInM'])
['india', 'usa']
>>> dict
<class 'dict'>
>>> import glob
>>> path = r"D:\handson"
>>> glob.glob(path+r"\*")
['D:\\handson\\commands.txt', 'D:\\handson\\data', 'D:\\handson\\DAY1.txt', 'D:\
\handson\\DAY2.txt', 'D:\\handson\\DAY3.txt', 'D:\\handson\\dict_examples.py', '
D:\\handson\\first.py', 'D:\\handson\\installation_jpmc.txt', 'D:\\handson\\list
_examples.py', 'D:\\handson\\mex.py', 'D:\\handson\\README.md', 'D:\\handson\\se
cond.py', 'D:\\handson\\string_examples.py', 'D:\\handson\\__pycache__']
>>> glob.glob(path+r"\*")
['D:\\handson\\commands.txt', 'D:\\handson\\data', 'D:\\handson\\DAY1.txt', 'D:\
\handson\\DAY2.txt', 'D:\\handson\\DAY3.txt', 'D:\\handson\\dict_examples.py', '
D:\\handson\\DIR.TXT', 'D:\\handson\\first.py', 'D:\\handson\\installation_jpmc.
txt', 'D:\\handson\\list_examples.py', 'D:\\handson\\mex.py', 'D:\\handson\\READ
ME.md', 'D:\\handson\\second.py', 'D:\\handson\\string_examples.py', 'D:\\handso
n\\__pycache__']
>>> import os.path
>>> dir(os.path)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '
__name__', '__package__', '__spec__', '_abspath_fallback', '_get_bothseps', '_ge
tfinalpathname', '_getfullpathname', '_getvolumepathname', 'abspath', 'altsep',
'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirna
me', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime',
'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismoun
t', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realp
ath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitd
rive', 'splitext', 'stat', 'supports_unicode_filenames', 'sys']
>>> os.path.getsize('D:\\handson\\first.py')
261
>>> os.path.isfile('D:\\handson\\first.py')
True
>>> from mex import getFilenameWithMaxSize
>>> path
'D:\\handson'
>>> getFilenameWithMaxSize(path)
'D:\\handson\\commands.txt'
>>> import subprocess as S
>>> command = "systeminfo"
>>> proc = S.Popen(command, stdout=S.PIPE, stderr=S.PIPE,
...     universal_new_lines=True)
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: __init__() got an unexpected keyword argument 'universal_new_lines'
>>>
>>> proc = S.Popen(command, stdout=S.PIPE, stderr=S.PIPE,
...     universal_newlines=True)
>>> import subprocess as S
>>> command = "systeminfo"
>>> proc = S.Popen(command, stdout=S.PIPE, stderr=S.PIPE,
...     universal_newlines=True)
>>>
>>> outs, oute = proc.communicate()
>>> outs[0:100]
'\nHost Name:                 HOME-E402\nOS Name:                   Microsoft Wi
ndows 8.1 Single Langua'
>>> len(outs)
14158
>>> s = "hello world"
>>> "\w\w\w\w\w\s\w\w\w\w\w"
'\\w\\w\\w\\w\\w\\s\\w\\w\\w\\w\\w'
>>> r"\w\w\w\w\w\s\w\w\w\w\w"
'\\w\\w\\w\\w\\w\\s\\w\\w\\w\\w\\w'
>>> r"\w+\s\w+"
'\\w+\\s\\w+'
>>> r"\w{5}\s\w{5}"
'\\w{5}\\s\\w{5}'
>>> import re
>>> s
'hello world'
>>> sp1 = r"\w+"
>>> re.findall(sp1, s)
['hello', 'world']
>>> sp2 = r"hello\s+(\w+)"
>>> re.findall(sp2, s)
['world']
>>> s2 = "A:B,C;D"
>>> s2.split(":")
['A', 'B,C;D']
>>> s2.split(":,;")
['A:B,C;D']
>>> re.split(r":|,|;", s2)
['A', 'B', 'C', 'D']
>>> re.sub("world", "earth", s)
'hello earth'
>>> s3 = "This is is round round"
>>> re.sub(r"(\w+)\s+\1", r"\1", s3)
'This is round'
>>> s4 = "this is round is round"
>>> re.sub(r"(\w+)\s+\1", r"\1", s4)
'this round is round'
>>> sp5 = r"(KB\w+)"
>>> kbs = re.findall(sp5, outs)
>>> len(kbs)
243
>>> kbs[0:5]
['KB2899189_Microsoft', 'KB3191564', 'KB2894852', 'KB2894856', 'KB2906972']
>>> sp5 = r"(KB[\w\-]+)"
>>> kbs = re.findall(sp5, outs)
>>> kbs[0:5]
['KB2899189_Microsoft-Windows-CameraCodec-Package', 'KB3191564', 'KB2894852', 'K
B2894856', 'KB2906972']
>>> import subprocess as S
>>> command = "systeminfo"
>>> proc = S.Popen(command, stdout=S.PIPE, stderr=S.PIPE,
...     universal_newlines=True)
>>> outs, oute = proc.communicate()
>>> sp5 = r"(KB[\w\-]+)"
>>> kbs = re.findall(sp5, outs)
>>> len(kbs)
243
>>> dir(int)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delatt
r__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '_
_floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__g
t__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__in
vert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__ne
g__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv
mod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__
', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '_
_rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__',
 '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__'
, 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', '
real', 'to_bytes']
>>> type(int)
<class 'type'>
>>> type(1)
<class 'int'>
>>> "Harry is goint to School"
'Harry is goint to School'
>>> "Harry is going to School"
'Harry is going to School'
>>> int
<class 'int'>
>>> 1
1
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from myclasses import MyInt
>>> a = MyInt(2)
>>> b = MyInt(3)
>>> print(a)
MyInt(2)
>>> a.add(b)
5
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
 '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__'
, '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort
']
>>> a = MyInt(2)
>>> a.value
2
>>> b = MyInt(3)
>>> b.value
3
>>> a.add(b)
5
>>> type( 1 )
<class 'int'>
>>> type( (1) )
<class 'int'>
>>> type( (1,) )
<class 'tuple'>
>>>
>>>
>>> a = 1
>>> if a >=1:
... print(a)
  File "<stdin>", line 2
    print(a)
        ^
IndentationError: expected an indented block
>>> raise IndentationError("OMG")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndentationError: OMG
>>> f = open("xy")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'xy'
>>> try:
...     f = open("xy")
... except Exception as ex:
...     print("some error happened")
...
some error happened
>>> try:
...     f = open("xy")
... except FileNotFoundError as ex:
...     print(ex)
...
[Errno 2] No such file or directory: 'xy'
>>>