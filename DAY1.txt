D:\Desktop\PPT>mkdir handson
A subdirectory or file handson already exists.

D:\Desktop\PPT>mkdir handson

D:\Desktop\PPT>cd  handson

D:\Desktop\PPT\handson>echo > first.py

D:\Desktop\PPT\handson>python first.py
1

D:\Desktop\PPT\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 1
>>> type(a)
<class 'int'>
>>> f = 1.2
>>> type(f)
<class 'float'>
>>> b = True
>>> type(b)
<class 'bool'>
>>> s = "Ok"
>>> type(s)
<class 'str'>
>>> b = a + 1
>>> print(b)
2
>>> a / 2
0.5
>>> a // 2
0
>>> a % 2
1
>>> s == "Ok"
True
>>> s = "Ok"
>>> a >= 1
True
>>> a <= 2
True
>>> a != 2
True
>>> a , "a"
(1, 'a')
>>> print("hello World")
hello World
>>> s
'Ok'
>>> s == "OK"
False
>>> quit()

D:\Desktop\PPT\handson>python first.py
1
1

D:\Desktop\PPT\handson>python first.py
  File "first.py", line 5
    print(a)
        ^
IndentationError: expected an indented block

D:\Desktop\PPT\handson>python first.py
  File "first.py", line 4
    if a >= 1
            ^
SyntaxError: invalid syntax

D:\Desktop\PPT\handson>python first.py
1
1

D:\Desktop\PPT\handson>echo > second.py

D:\Desktop\PPT\handson>python second.py
  File "second.py", line 1
    ECHO is on.
              ^
SyntaxError: invalid syntax

D:\Desktop\PPT\handson>python second.py
suitable

D:\Desktop\PPT\handson>python second.py
suitable
END

D:\Desktop\PPT\handson>python second.py
not known
END

D:\Desktop\PPT\handson>python second.py
Give Name:ABC
not known
END

D:\Desktop\PPT\handson>python second.py
Give Name:XYZ
suitable
END

D:\Desktop\PPT\handson>python second.py
Give Name:ABC
Give Age:20
not known
END

D:\Desktop\PPT\handson>python second.py
Give Name:XYZ
Give Age:40
Traceback (most recent call last):
  File "second.py", line 10, in <module>
    if age < 40:
TypeError: '<' not supported between instances of 'str' and 'int'

D:\Desktop\PPT\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "1"
>>> a = 1
>>> type(a)
<class 'int'>
>>> int(s)
1
>>> type(s)
<class 'str'>
>>> str(a)
'1'
>>> quit()

D:\Desktop\PPT\handson>python second.py
Give Name:XYZ
Give Age:40
OK
END

D:\Desktop\PPT\handson>python second.py
Give Name:XYZ
Give Age:40
OK
END

D:\Desktop\PPT\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "OK"
>>> s = 'OK'
>>> s = """Hello
... World
... Earth"""
>>> s
'Hello\nWorld\nEarth'
>>> len(s)
17
>>> "Hello" in s
True
>>> "Hello" not in s
False
>>> s[0]
'H'
>>> s[len(s)-1]
'h'
>>> s[-1]
'h'
>>> s[-2]
't'
>>> s[-len(s)]
'H'
>>> s = "Hello y'"
>>> s = 'Hello y"'
>>> s = "Hello y\""
>>> quit()

D:\Desktop\PPT\handson>echo > string_examples.py

D:\Desktop\PPT\handson>python string_examples.py
H
e
l
l
o

W
o
r
l
d

D:\Desktop\PPT\handson>python string_examples.py
index: 0 element: H
index: 1 element: e
index: 2 element: l
index: 3 element: l
index: 4 element: o
index: 5 element:
index: 6 element: W
index: 7 element: o
index: 8 element: r
index: 9 element: l
index: 10 element: d

D:\Desktop\PPT\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> #initialize a
>>> a = 0
>>> #increment a
>>> a = a + 1
>>> quit()

D:\Desktop\PPT\handson>python string_examples.py
H - 1
e - 1
l - 3
l - 3
o - 2
  - 1
W - 1
o - 2
r - 1
l - 3
d - 1

D:\Desktop\PPT\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "Hello World"
>>> len(s)
11
>>> s[0]
'H'
>>> s[0:5] # start:end
'Hello'
>>> s[0:5:1] # start:end:step
'Hello'
>>> s[0], s[0+1], s[1+1], s[2+1], s[4]
('H', 'e', 'l', 'l', 'o')
>>> s[0:5:2] # start:end:step
'Hlo'
>>> s[0], s[2], s[4]
('H', 'l', 'o')
>>> s[6:10]
'Worl'
>>> s[6:11]
'World'
>>> s[6:]
'World'
>>> s[:]
'Hello World'
>>> s[::2]
'HloWrd'
>>> s[0], s[2], s[4], s[6], s[8], s[10]
('H', 'l', 'o', 'W', 'r', 'd')
>>>
>>> s
'Hello World'
>>> s[0]
'H'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> s2 = s + " OK"
>>> s2
'Hello World OK'
>>> s
'Hello World'
>>> "OK" * 4
'OKOKOKOK'
>>> type(s)
<class 'str'>
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__'
, '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'e
ncode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isal
num', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', '
isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lo
wer', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust',
 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> s1 = "A:B:C"
>>> s1.split(":")
['A', 'B', 'C']
>>> s2 = "[OK, NOK]"
>>> s2.strip('[]')
'OK, NOK'
>>> s3 = "    OK     "
>>> s3.strip(" ")
'OK'
>>> len(s1)
5
>>> #s1.len()
>>> help(str.strip)
Help on method_descriptor:

strip(self, chars=None, /)
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.

>>> lst = [ 1, 1.2, "OK", [1,2,3]]
>>> el = []
>>> type(el)
<class 'list'>
>>> len(lst)
4
>>> 1.2 in lst
True
>>> lst == [1,2]
False
>>> 1.3 not in lst
True
>>> lst[0]
1
>>> lst[-1]
[1, 2, 3]
>>> lst[-1] = 30
>>> lst
[1, 1.2, 'OK', 30]
>>> for e in lst:
...     print(e)
...
1
1.2
OK
30
>>> lst
[1, 1.2, 'OK', 30]
>>> lst[-2]
'OK'
>>> lst[2]
'OK'
>>> lst
[1, 1.2, 'OK', 30]
>>> lst[0:2]  #start:end:step
[1, 1.2]
>>> lst[::2]
[1, 'OK']
>>> s = "Hello"
>>> s[0:2]
'He'
>>> s[::2]
'Hlo'
>>> lst2 = lst + [ 20,30]
>>> lst2
[1, 1.2, 'OK', 30, 20, 30]
>>> lst
[1, 1.2, 'OK', 30]
>>> lst
[1, 1.2, 'OK', 30]
>>> lst.append( 45)
>>> lst
[1, 1.2, 'OK', 30, 45]
>>>