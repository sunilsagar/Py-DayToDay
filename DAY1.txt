Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

C:\Users\das>python --version
Python 3.7.6

C:\Users\das>d:

D:\>mkdir handson

D:\>cd handson

D:\handson>echo > first.py

D:\handson>dir first.py
 Volume in drive D is LENOVO
 Volume Serial Number is 0299-ED51

 Directory of D:\handson

27-07-2020  10:25                13 first.py
               1 File(s)             13 bytes
               0 Dir(s)   5,901,623,296 bytes free

D:\handson>python first.py
Hello world

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 1
>>> type(a)
<class 'int'>
>>> f = 1.2
>>> type(f)
<class 'float'>
>>> b = True
>>> type(b)
<class 'bool'>
>>> s = "OK"
>>> type(s)
<class 'str'>
>>> a + 1
2
>>> "a" + 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
>>> a * 2
2
>>> f * 4
4.8
>>> a / 2
0.5
>>> a // 2
0
>>> a % 2
1
>>> from __future__ import division, print_function
>>> a // 2
0
>>> a / 2
0.5
>>> a % 2
1
>>> quit()

D:\handson>python first.py
a= 1 b= 3

D:\handson>python first.py
a= 1 b= 3

D:\handson>python first.py
Traceback (most recent call last):
  File "first.py", line 4, in <module>
    b = a + 2
TypeError: can only concatenate str (not "int") to str

D:\handson>python first.py
Traceback (most recent call last):
  File "first.py", line 5, in <module>
    b = a + 2
TypeError: can only concatenate str (not "int") to str

D:\handson>python first.py
a= 1 b= 3

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = "1"
>>> s = 1
>>> f = "1.2"
>>> int(a)
1
>>> float(f)
1.2
>>> str(s)
'1'
>>> quit()

D:\handson>python first.py
a1 is greater
a= 1 b= 3

D:\handson>python first.py
  File "first.py", line 6
    if a1 > 0
            ^
SyntaxError: invalid syntax

D:\handson>python first.py
  File "first.py", line 7
    print("a1 is greater")
        ^
IndentationError: expected an indented block

D:\handson>python first.py
a1 is greater
a= 1 b= 3

D:\handson>python first.py
  File "first.py", line 7
    print "a1 is greater"
                        ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("a1 is g
reater")?

D:\handson>python first.py
Traceback (most recent call last):
  File "first.py", line 6, in <module>
    if "a1" > 0:
TypeError: '>' not supported between instances of 'str' and 'int'

D:\handson>python first.py
a1 is greater
a= 1 b= 3

D:\handson>python first.py
a1 is greater
a= 1 b= 3

D:\handson>python first.py
a1 is greater
a1= 1
a= 1 b= 3

D:\handson>python first.py
a1 is greater
a1= 1
end

D:\handson>python first.py
a1 is greater
a1= 1
a= 1 b= 3
end

D:\handson>python second.py
not known

D:\handson>python second.py
suitable

D:\handson>python second.py
Give name: ABC
Give age: 20
not known

D:\handson>python second.py
Give name: XYZ
Give age: 40
OK

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "Hello World"
>>> s = 'Hello World'
>>> sr = """Hello
... World
... Hello"""
>>> sr
'Hello\nWorld\nHello'
>>> sr = """ Hello "OK" and 'not ok' """
>>> sr
' Hello "OK" and \'not ok\' '
>>> print("\n\n\n")




>>> s
'Hello World'
>>> len(s)
11
>>> "Hello" in s
True
>>> "hello" in s
False
>>> "hello" not in s
True
>>> s
'Hello World'
>>> s == "OK"
False
>>> s != "OK"
True
>>> # initialize a
>>> a = 0
>>> # increment a
>>> a = a + 1
>>>
>>> s
'Hello World'
>>> s[0]
'H'
>>> s[1]
'e'
>>> s[lens(s)-1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'lens' is not defined
>>> s[len(s)-1]
'd'
>>> s[-1]
'd'
>>> s[-2]
'l'
>>> s[0:5]  # start:end:step
'Hello'
>>> s[0:5:2]  # start:end:step
'Hlo'
>>> s[:]
'Hello World'
>>> s[::-1]
'dlroW olleH'
>>> for e in s[::2]:
...     print(e)
...
H
l
o
W
r
d
>>> s
'Hello World'
>>> s2 = s + " OK"
>>> s2
'Hello World OK'
>>> s
'Hello World'
>>> "OK" * 4
'OKOKOKOK'
>>> s[0] = 'K'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> # LETS MEET AT 12:15
>>> sd = "id=%d name=%s salary=%f" % (1, "ABC", 23.45)
>>> print(sd)
id=1 name=ABC salary=23.450000
>>> sd = "id=%d name=%s salary=%2.1f" % (1, "ABC", 23.45)
>>> sd
'id=1 name=ABC salary=23.4'
>>> s = "aabbbbccc"
>>> output = "abc"
>>> output = ""
>>> for e in s:
...     if e not in output:
...             output =output + s
...
>>> output
'aabbbbccc'
>>> output = ""
>>> for e in s:
...     if e not in output:
...             output =output + e
...
>>> output
'abc'
>>> output = ""
>>> for e in s:
...     if e not in output:
...             output =output + e
...             print(output)
...
a
ab
abc
>>> s
'aabbbbccc'
>>> type(s)
<class 'str'>
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__'
, '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'e
ncode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isal
num', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', '
isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lo
wer', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust',
 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> help(str.endswith)
Help on method_descriptor:

endswith(...)
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.

>>> s = "Hello World"
>>> s.endswith("ld")
True
>>> help(str.split)
Help on method_descriptor:

split(self, /, sep=None, maxsplit=-1)
    Return a list of the words in the string, using sep as the delimiter string.

    sep
      The delimiter according which to split the string.
      None (the default value) means split according to any whitespace,
      and discard empty strings from the result.
    maxsplit
      Maximum number of splits to do.
      -1 (the default value) means no limit.

>>> s.split()
['Hello', 'World']
>>> s.split(" ")
['Hello', 'World']
>>> len(s)
11
>>> s.split()
['Hello', 'World']
>>> split(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'split' is not defined
>>> help(str.split)
Help on method_descriptor:

split(self, /, sep=None, maxsplit=-1)
    Return a list of the words in the string, using sep as the delimiter string.

    sep
      The delimiter according which to split the string.
      None (the default value) means split according to any whitespace,
      and discard empty strings from the result.
    maxsplit
      Maximum number of splits to do.
      -1 (the default value) means no limit.

>>> help(str.strip)
Help on method_descriptor:

strip(self, chars=None, /)
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.

>>> s = "  OK   "
>>> s.strip()
'OK'
>>> s = "Hello"
>>> s.strip()
'Hello'
>>> s.strip("H")
'ello'
>>> s.strip("Ho")
'ell'
>>> s = "   OK  "
>>> s.strip(" O")
'K'
>>> len(s)
7
>>> s.len() ## WRONG
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'str' object has no attribute 'len'
>>> lst = [1, 2.3, "OK", [1,2,3]]
>>> el = []
>>> len(lst)
4
>>> len(el)
0
>>> if el :
...     print("not empty")
...
>>> if lst :
...     print("not empty")
...
not empty
>>> 2.3 in lst
True
>>> 2.4 not in lst
True
>>> lst == [1,2]
False
>>> lst[0]
1
>>> lst[-1]
[1, 2, 3]
>>> if not el :
...     print("empty")
...
empty
>>> lst[-1] = 30
>>> lst
[1, 2.3, 'OK', 30]
>>> lst
[1, 2.3, 'OK', 30]
>>> lst.append(40)
>>> lst
[1, 2.3, 'OK', 30, 40]
>>> lst2 = lst + [30,60]
>>> lst2
[1, 2.3, 'OK', 30, 40, 30, 60]
>>> lst
[1, 2.3, 'OK', 30, 40]
>>> lst.append([40, 45])
>>> lst
[1, 2.3, 'OK', 30, 40, [40, 45]]
>>> lst + 3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "int") to list
>>> lst + [3]
[1, 2.3, 'OK', 30, 40, [40, 45], 3]
>>> lst
[1, 2.3, 'OK', 30, 40, [40, 45]]
>>> lst[0:4]
[1, 2.3, 'OK', 30]
>>> lst[::-1]
[[40, 45], 40, 30, 'OK', 2.3, 1]
>>> lst[::2]
[1, 'OK', 40]
>>> for e in lst:
...     print(e)
...
1
2.3
OK
30
40
[40, 45]
>>> lsw = [ "OK", "NOK", "O"]
>>> len(lsw)
3
>>> type(lsw)
<class 'list'>
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
 '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__'
, '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort
']
>>> lst = [ [1,2,3, [2,[4]]], 20]
>>> len(lst)
2
>>> lst[-1]
20
>>> lst[0]
[1, 2, 3, [2, [4]]]
>>> lst[0][1]
2












