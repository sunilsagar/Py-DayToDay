Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import requests
>>> quit()

D:\handson>where python.exe
c:\Python37\python.exe
C:\Anaconda2\python.exe

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> path = r"D:\handson\data\example.json"
>>> import json
>>> with open(path, "rt") as f:
...     obj = json.load(f)
...
>>> obj
[{'empId': 1, 'details': {'firstName': 'John', 'lastName': 'Smith', 'isAlive': T
rue, 'age': 25, 'salary': 123.5, 'address': {'streetAddress': '21 2nd Street', '
city': 'New York', 'state': 'NY', 'postalCode': '10021-3100'}, 'phoneNumbers': [
{'type': 'home', 'number': '212 555-1234'}, {'type': 'office', 'number': '646 55
5-4567'}, {'type': 'mobile', 'number': '123 456-7890'}], 'children': [], 'spouse
': None}}, {'empId': 20, 'details': {'firstName': 'Johns', 'lastName': 'Smith',
'isAlive': True, 'age': 25, 'salary': 123.5, 'address': {'streetAddress': '21 2n
d Street', 'city': 'New York', 'state': 'CL', 'postalCode': '10021-3100'}, 'phon
eNumbers': [{'type': 'home', 'number': '212 555-1234'}, {'type': 'office', 'numb
er': '646 555-4567'}, {'type': 'mobile', 'number': '123 456-7890'}], 'children':
 [], 'spouse': None}}]
>>> emp = obj[0]
>>> emp
{'empId': 1, 'details': {'firstName': 'John', 'lastName': 'Smith', 'isAlive': Tr
ue, 'age': 25, 'salary': 123.5, 'address': {'streetAddress': '21 2nd Street', 'c
ity': 'New York', 'state': 'NY', 'postalCode': '10021-3100'}, 'phoneNumbers': [{
'type': 'home', 'number': '212 555-1234'}, {'type': 'office', 'number': '646 555
-4567'}, {'type': 'mobile', 'number': '123 456-7890'}], 'children': [], 'spouse'
: None}}
>>> emp['details']
{'firstName': 'John', 'lastName': 'Smith', 'isAlive': True, 'age': 25, 'salary':
 123.5, 'address': {'streetAddress': '21 2nd Street', 'city': 'New York', 'state
': 'NY', 'postalCode': '10021-3100'}, 'phoneNumbers': [{'type': 'home', 'number'
: '212 555-1234'}, {'type': 'office', 'number': '646 555-4567'}, {'type': 'mobil
e', 'number': '123 456-7890'}], 'children': [], 'spouse': None}
>>> emp['details']["address"]
{'streetAddress': '21 2nd Street', 'city': 'New York', 'state': 'NY', 'postalCod
e': '10021-3100'}
>>> emp['details']["address"]['state']
'NY'
>>> o = []
>>> for emp in obj:
...     o.append( emp['details']["address"]['state'] )
...
>>> o
['NY', 'CL']
>>> import json, urllib.request  #py3 for py2, import urllib
>>> url = "http://httpbin.org/get"
>>> web = urllib.request.urlopen(url)
>>> data = web.read()
>>> obj = json.loads(data.decode('utf-8'))
>>> obj
{'args': {}, 'headers': {'Accept-Encoding': 'identity', 'Host': 'httpbin.org', '
User-Agent': 'Python-urllib/3.7', 'X-Amzn-Trace-Id': 'Root=1-5f3cb446-f63e7fac97
e6c98454aa9cec'}, 'origin': '117.195.161.184', 'url': 'http://httpbin.org/get'}
>>> import pprint
>>> pprint.pprint(obj)
{'args': {},
 'headers': {'Accept-Encoding': 'identity',
             'Host': 'httpbin.org',
             'User-Agent': 'Python-urllib/3.7',
             'X-Amzn-Trace-Id': 'Root=1-5f3cb446-f63e7fac97e6c98454aa9cec'},
 'origin': '117.195.161.184',
 'url': 'http://httpbin.org/get'}
>>> import requests
>>> r = requests.get(url)
>>> obj = r.json()
>>> obj
{'args': {}, 'headers': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'H
ost': 'httpbin.org', 'User-Agent': 'python-requests/2.22.0', 'X-Amzn-Trace-Id':
'Root=1-5f3cb617-78f263ead24133eeea63d394'}, 'origin': '117.195.161.184', 'url':
 'http://httpbin.org/get'}
>>> path = r"D:\handson\data\example.xml"
>>> import xml.etree.ElementTree as ET
>>> tr = ET.parse(path)
>>> root = tr.getroot()
>>> root.tag
'data'
>>> root.attrib
{}
>>> root.text
'\n    '
>>> type(root)
<class 'xml.etree.ElementTree.Element'>
>>> import xml.etree.ElementTree
>>> tr1 = xml.etree.ElementTree.parse(path)
>>> type(tr)
<class 'xml.etree.ElementTree.ElementTree'>
>>> xpath= "./country/rank"
>>> nn = root.findall(xpath)
>>> nn
[<Element 'rank' at 0x000000A32DEA2138>, <Element 'rank' at 0x000000A32DEA2318>,
 <Element 'rank' at 0x000000A32DEA24A8>]
>>> o = []
>>> for n in nn:
...     o.append( n.text )
...
>>> o
['1', '4', '68']
>>> n = nn[0]
>>> n.text
'1'
>>> xpath= ".//rank"
>>> nn = root.findall(xpath)
>>> nn
[<Element 'rank' at 0x000000A32DEA2138>, <Element 'rank' at 0x000000A32DEA2318>,
 <Element 'rank' at 0x000000A32DEA24A8>]
>>> #Can you give me names of all countries
>>> #[{'name': 'Liechtenstein'}, {'name': 'Singapore'}, {'name': 'Panama'}]
>>> #['Liechtenstein', 'Singapore', ...]
>>> o = []
>>> xpath= "./country"
>>> nn = root.findall(xpath)
>>> n = nn[0]
>>> n.attrib
{'name': 'Liechtenstein'}
>>> n.attrib['name']
'Liechtenstein'
>>> for n in nn:
...     o.append( n.attrib['name'] )
...
>>> o
['Liechtenstein', 'Singapore', 'Panama']
>>> import math
>>> dir(math)
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh'
, 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh',
'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fm
od', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'is
inf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan'
, 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'ta
u', 'trunc']
>>> math.sqrt(2)
1.4142135623730951
>>> import time
>>> dir(time)
['_STRUCT_TM_ITEMS', '__doc__', '__loader__', '__name__', '__package__', '__spec
__', 'altzone', 'asctime', 'clock', 'ctime', 'daylight', 'get_clock_info', 'gmti
me', 'localtime', 'mktime', 'monotonic', 'monotonic_ns', 'perf_counter', 'perf_c
ounter_ns', 'process_time', 'process_time_ns', 'sleep', 'strftime', 'strptime',
'struct_time', 'thread_time', 'thread_time_ns', 'time', 'time_ns', 'timezone', '
tzname']
>>> time.sleep(1)
>>> import datetime
>>> dir(datetime)
['MAXYEAR', 'MINYEAR', '__builtins__', '__cached__', '__doc__', '__file__', '__l
oader__', '__name__', '__package__', '__spec__', 'date', 'datetime', 'datetime_C
API', 'sys', 'time', 'timedelta', 'timezone', 'tzinfo']
>>> datetime.date(2020,8,19)
datetime.date(2020, 8, 19)
>>> datetime.date(2020,8,19) + datetime.timedelta(days=365)
datetime.date(2021, 8, 19)
>>> import sys
>>> dir(sys)
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__', '__intera
ctivehook__', '__loader__', '__name__', '__package__', '__spec__', '__stderr__',
 '__stdin__', '__stdout__', '_base_executable', '_clear_type_cache', '_current_f
rames', '_debugmallocstats', '_enablelegacywindowsfsencoding', '_framework', '_g
etframe', '_git', '_home', '_xoptions', 'api_version', 'argv', 'base_exec_prefix
', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_t
racing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytec
ode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'f
loat_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_trac
king_depth', 'get_coroutine_wrapper', 'getallocatedblocks', 'getcheckinterval',
'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'get
profile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',
'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'i
nt_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modu
les', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',
'ps2', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'set_corouti
ne_wrapper', 'setcheckinterval', 'setprofile', 'setrecursionlimit', 'setswitchin
terval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'ver
sion_info', 'warnoptions', 'winver']
>>> print("OK")
OK
>>> sys.stdout.write("OK")
OK2
>>> import os
>>> dir(os)
['DirEntry', 'F_OK', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT', 'O_EXC
L', 'O_NOINHERIT', 'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_SEQUENTIAL', 'O_SHORT_LI
VED', 'O_TEMPORARY', 'O_TEXT', 'O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P
_NOWAITO', 'P_OVERLAY', 'P_WAIT', 'PathLike', 'R_OK', 'SEEK_CUR', 'SEEK_END', 'S
EEK_SET', 'TMP_MAX', 'W_OK', 'X_OK', '_Environ', '__all__', '__builtins__', '__c
ached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spe
c__', '_execvpe', '_exists', '_exit', '_fspath', '_get_exports_list', '_putenv',
 '_unsetenv', '_wrap_close', 'abc', 'abort', 'access', 'altsep', 'chdir', 'chmod
', 'close', 'closerange', 'cpu_count', 'curdir', 'defpath', 'device_encoding', '
devnull', 'dup', 'dup2', 'environ', 'error', 'execl', 'execle', 'execlp', 'execl
pe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fdopen', 'fsdecode', 'fs
encode', 'fspath', 'fstat', 'fsync', 'ftruncate', 'get_exec_path', 'get_handle_i
nheritable', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'geten
v', 'getlogin', 'getpid', 'getppid', 'isatty', 'kill', 'linesep', 'link', 'listd
ir', 'lseek', 'lstat', 'makedirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'p
athsep', 'pipe', 'popen', 'putenv', 'read', 'readlink', 'remove', 'removedirs',
'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sep', 'set_handle_inheritab
le', 'set_inheritable', 'spawnl', 'spawnle', 'spawnv', 'spawnve', 'st', 'startfi
le', 'stat', 'stat_result', 'statvfs_result', 'strerror', 'supports_bytes_enviro
n', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow
_symlinks', 'symlink', 'sys', 'system', 'terminal_size', 'times', 'times_result'
, 'truncate', 'umask', 'uname_result', 'unlink', 'urandom', 'utime', 'waitpid',
'walk', 'write']
>>> os.curdir
'.'
>>> import os.path
>>> dir(os.path)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '
__name__', '__package__', '__spec__', '_abspath_fallback', '_get_bothseps', '_ge
tfinalpathname', '_getfullpathname', '_getvolumepathname', 'abspath', 'altsep',
'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirna
me', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime',
'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismoun
t', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realp
ath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitd
rive', 'splitext', 'stat', 'supports_unicode_filenames', 'sys']
>>> os.path.abspath(os.curdir)
'D:\\handson'
>>> quit()

D:\handson>python first.py XYZ 20
['first.py', 'XYZ', '20']
suitable

D:\handson>python first.py
['first.py']
Traceback (most recent call last):
  File "first.py", line 31, in <module>
    name = sys.argv[1]
IndexError: list index out of range

D:\handson>python first.py
['first.py']
suitable

D:\handson>python first.py ABC
['first.py', 'ABC']
not known

D:\handson>python first.py ABC 30
['first.py', 'ABC', '30']
not known

D:\handson>echo > files_examples.py

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> path = r"d:/handson"
>>> import glob
>>> glob.glob(path+"/*")
['d:/handson\\commands.txt', 'd:/handson\\data', 'd:/handson\\DAY1.txt', 'd:/han
dson\\DAY2.txt', 'd:/handson\\dict_examples.py', 'd:/handson\\files_examples.py'
, 'd:/handson\\first.py', 'd:/handson\\installation_jpmc.txt', 'd:/handson\\iris
.db', 'd:/handson\\list_examples.py', 'd:/handson\\README.md', 'd:/handson\\stri
ng_examples.py']
>>> glob.glob(path+"/*")
['d:/handson\\commands.txt', 'd:/handson\\data', 'd:/handson\\DAY1.txt', 'd:/han
dson\\DAY2.txt', 'd:/handson\\dict_examples.py', 'd:/handson\\files_examples.py'
, 'd:/handson\\first.py', 'd:/handson\\installation_jpmc.txt', 'd:/handson\\iris
.db', 'd:/handson\\list_examples.py', 'd:/handson\\README.md', 'd:/handson\\READ
ME.txt', 'd:/handson\\string_examples.py']
>>> import os.path
>>> dir(os.path)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '
__name__', '__package__', '__spec__', '_abspath_fallback', '_get_bothseps', '_ge
tfinalpathname', '_getfullpathname', '_getvolumepathname', 'abspath', 'altsep',
'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirna
me', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime',
'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismoun
t', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realp
ath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitd
rive', 'splitext', 'stat', 'supports_unicode_filenames', 'sys']
>>> quit()

D:\handson>ls
DAY1.txt    commands.txt       first.py               string_examples.py
DAY2.txt    data               installation_jpmc.txt
README.md   dict_examples.py   iris.db
README.txt  files_examples.py  list_examples.py

D:\handson>python files_examples.py
{'commands.txt': 30022, 'DAY1.txt': 21061, 'DAY2.txt': 26944, 'dict_examples.py'
: 3599, 'files_examples.py': 624, 'first.py': 1048, 'installation_jpmc.txt': 131
6, 'iris.db': 16384, 'list_examples.py': 814, 'README.md': 121, 'string_examples
.py': 1617}

D:\handson>python files_examples.py "d:/handson"
{'d:\\handson\\commands.txt': 30022, 'd:\\handson\\DAY1.txt': 21061, 'd:\\handso
n\\DAY2.txt': 26944, 'd:\\handson\\dict_examples.py': 3599, 'd:\\handson\\files_
examples.py': 624, 'd:\\handson\\first.py': 1048, 'd:\\handson\\installation_jpm
c.txt': 1316, 'd:\\handson\\iris.db': 16384, 'd:\\handson\\list_examples.py': 81
4, 'd:\\handson\\README.md': 121, 'd:\\handson\\string_examples.py': 1617}

D:\handson>where pip.exe
c:\Python37\Scripts\pip.exe
C:\Anaconda2\Scripts\pip.exe

D:\handson>where python.exe
c:\Python37\python.exe
C:\Anaconda2\python.exe

D:\handson>c:\Python37\Scripts\pip.exe install requests
Requirement already satisfied: requests in c:\python37\lib\site-packages (2.22.0
)
Requirement already satisfied: idna<2.9,>=2.5 in c:\python37\lib\site-packages (
from requests) (2.8)
Requirement already satisfied: certifi>=2017.4.17 in c:\python37\lib\site-packag
es (from requests) (2019.11.28)
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in c:\pyt
hon37\lib\site-packages (from requests) (1.25.7)
Requirement already satisfied: chardet<3.1.0,>=3.0.2 in c:\python37\lib\site-pac
kages (from requests) (3.0.4)
WARNING: You are using pip version 19.2.3, however version 20.2.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' comm
and.

D:\handson>echo > mex.py

D:\handson>dir mex.py
 Volume in drive D is LENOVO
 Volume Serial Number is 0299-ED51

 Directory of D:\handson

19-08-2020  14:09                13 mex.py
               1 File(s)             13 bytes
               0 Dir(s)   5,893,136,384 bytes free

D:\handson>python mex.py
100

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mex
>>> mex.square(10)
100
>>> help(mex.square)
Help on function square in module mex:

square(x)
    Squaring the input
    number

>>> dir(mex)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__',
'__package__', '__spec__', 'square']
>>> mex.__dict__['__name__']
'mex'
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mex
100
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mex
>>> mex.square(10)
100
>>> help(mex.square)
Help on function square in module mex:

square(x)
    Squaring the input
    number

>>> import sys
>>> sys.path
['', 'c:\\python37\\python37.zip', 'c:\\python37\\DLLs', 'c:\\python37\\lib', 'c
:\\python37', 'c:\\python37\\lib\\site-packages', 'c:\\python37\\lib\\site-packa
ges\\win32', 'c:\\python37\\lib\\site-packages\\win32\\lib', 'c:\\python37\\lib\
\site-packages\\Pythonwin']
>>> quit()

D:\handson>echo > sys.py

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> dir(sys)
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__', '__intera
ctivehook__', '__loader__', '__name__', '__package__', '__spec__', '__stderr__',
 '__stdin__', '__stdout__', '_base_executable', '_clear_type_cache', '_current_f
rames', '_debugmallocstats', '_enablelegacywindowsfsencoding', '_framework', '_g
etframe', '_git', '_home', '_xoptions', 'api_version', 'argv', 'base_exec_prefix
', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_t
racing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytec
ode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'f
loat_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_trac
king_depth', 'get_coroutine_wrapper', 'getallocatedblocks', 'getcheckinterval',
'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'get
profile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',
'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'i
nt_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modu
les', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',
'ps2', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'set_corouti
ne_wrapper', 'setcheckinterval', 'setprofile', 'setrecursionlimit', 'setswitchin
terval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'ver
sion_info', 'warnoptions', 'winver']
>>> quit()

D:\handson>echo > requests.py

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def add(x,y):
...     return x+y
...
>>> add(10,20)
30
>>> add(y=10,x=20)
30
>>> add(20,y=30)
50
>>> def add1(x, y=20):
...     return x+y
...
>>> add1(20)
40
>>> add1(20,40)
60
>>> sum([1,2,3])
6
>>> lst = [1,2,3]
>>> m = (1+2+3)/3
>>> m
2.0
>>> #sqrt((1-m)^2+(2-m)^2+(3-m)^2)/3)
>>> #mex.mean(lst) -> gives result
>>> #mex.sd(lst) -> gives result
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mex
>>> lst = [1,2,3]
>>> mex.mean(lst)
2.0
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mex
>>> lst = [1,2,3]
>>> mex.mean(lst)
2.0
>>> mex.sd(lst)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "D:\handson\mex.py", line 23, in sd
    result = math.sqrt(sum(o)/len(o))
NameError: name 'math' is not defined
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mex
>>> lst = [1,2,3]
>>> mex.mean(lst)
2.0
>>> mex.sd(lst)
0.816496580927726
>>> quit()

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> quit()

D:\handson>python mex1.py
100

D:\handson>python mex1.py
100
Traceback (most recent call last):
  File "mex1.py", line 29, in <module>
    mn= mean(lst)
NameError: name 'lst' is not defined

D:\handson>python mex1.py
100
0.816496580927726

D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def p(x):
...     print(x+y)
...
>>> p(20) # 20, Error, 20+y
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in p
NameError: name 'y' is not defined
>>> y = 30
>>> p(20) #50, Error
50
>>> x = "Hello"
>>> len = 30
>>> print(len(x))#5, Error, 30
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
>>> #LGB
>>> del len
>>> print(len(x))#5, Error, 30
5
>>> ok = 30
>>> def p(x):
...     ok = x+2
...
>>> p(5)#7, 32, 30,
>>> ok
30
>>> #LGB only for reading, for writing -local
>>> def p(x):
...     global ok
...     ok = x+2
...
>>> p(5)
>>> ok
7
>>> #Join at 16:14
>>> quit()

D:\handson>echo > server.py

D:\handson>python server.py
 * Serving Flask app "server" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployme
nt.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
127.0.0.1 - - [19/Aug/2020 16:31:18] "←[37mGET / HTTP/1.1←[0m" 200 -
127.0.0.1 - - [19/Aug/2020 16:31:39] "←[33mGET /favicon.ico HTTP/1.1←[0m" 404 -
127.0.0.1 - - [19/Aug/2020 16:32:20] "←[37mGET / HTTP/1.1←[0m" 200 -
127.0.0.1 - - [19/Aug/2020 16:32:20] "←[33mGET /favicon.ico HTTP/1.1←[0m" 404 -

D:\handson>python server.py
 * Serving Flask app "server" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployme
nt.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
127.0.0.1 - - [19/Aug/2020 16:52:59] "←[37mGET /helloj HTTP/1.1←[0m" 200 -
127.0.0.1 - - [19/Aug/2020 16:53:59] "←[37mGET /helloj HTTP/1.1←[0m" 200 -
127.0.0.1 - - [19/Aug/2020 16:57:19] "←[37mGET /helloj HTTP/1.1←[0m" 200 -

D:\handson>

D:\handson>

D:\handson>


>>> import requests
>>> url = "http://127.0.0.1:5000/helloj"
>>> r = requests.get(url)
>>> obj = r.json()
>>> obj
{'message': 'Hello World'}
>>> type(obj)
<class 'dict'>
>>> obj["message"]
'Hello World'
>>> r.text
'{"message":"Hello World"}\n'
>>>