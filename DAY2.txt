D:\handson>python
Python 3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit
(AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> s = "Hllo"
>>> lst = [1,2,3]
>>> len(s), len(lst)
(4, 3)
>>> "H" in s, 2 in lst
(True, True)
>>> s == "OK", lst == [1,2]
(False, False)
>>> s[0], lst[0]
('H', 1)
>>> s[-1], lst[-1]
('o', 3)
>>> s[::-1], lst[::-1]
('ollH', [3, 2, 1])
>>> for e in s:
...     print(e)
...
H
l
l
o
>>> for e in lst:
...     print(e)
...
1
2
3
>>> dir(lst)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
 '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__'
, '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort
']
>>> lst.copy()
[1, 2, 3]
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__'
, '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'e
ncode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isal
num', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', '
isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lo
wer', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust',
 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> help(str.split)
Help on method_descriptor:

split(self, /, sep=None, maxsplit=-1)
    Return a list of the words in the string, using sep as the delimiter string.

    sep
      The delimiter according which to split the string.
      None (the default value) means split according to any whitespace,
      and discard empty strings from the result.
    maxsplit
      Maximum number of splits to do.
      -1 (the default value) means no limit.

>>> s = "Hello World"
>>> s.split()
['Hello', 'World']
>>> s.split(" ")
['Hello', 'World']
>>> s = "A:B:C:E"
>>> s.split(":")
['A', 'B', 'C', 'E']
>>> s = "   OK  "
>>> s.strip()
'OK'
>>> help(str.strip)
Help on method_descriptor:

strip(self, chars=None, /)
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.

>>> ls = "[1,2,3,4]"
>>> ls.strip("[]")
'1,2,3,4'
>>> tmp1 = ls.strip("[]")
>>> tmp1
'1,2,3,4'
>>> tmp1.split(",")
['1', '2', '3', '4']
>>> ls.strip("[]").split(",")
['1', '2', '3', '4']
>>>
>>> lst = [1,2,3]
>>> lst = list(range(0,10))
>>> lst
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> help(range)
Help on class range in module builtins:

class range(object)
 |  range(stop) -> range object
 |  range(start, stop[, step]) -> range object
 |
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |
 |  Methods defined here:
 |
 |  __bool__(self, /)
 |      self != 0
 |
 |  __contains__(self, key, /)
 |      Return key in self.
 |
 |  __eq__(self, value, /)
 |      Return self==value.

>>> range(10)
range(0, 10)
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> lst = list(range(0,10))
>>> lst
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> lst[2] = 30
>>> lst
[0, 1, 30, 3, 4, 5, 6, 7, 8, 9]
>>> t = (1,2,3)
>>> t2 = tuple(range(0,10))
>>> t2
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
>>> t2[2] = 30
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> lst
[0, 1, 30, 3, 4, 5, 6, 7, 8, 9]
>>> tuple(lst)
(0, 1, 30, 3, 4, 5, 6, 7, 8, 9)
>>> t
(1, 2, 3)
>>> type(t)
<class 'tuple'>
>>> len(t)
3
>>> 3 in t
True
>>> t == (1,2)
False
>>> for e in t:
...     print(e)
...
1
2
3
>>> t
(1, 2, 3)
>>> t.append(30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> t2 = t + (30,40)
>>> t
(1, 2, 3)
>>> t2
(1, 2, 3, 30, 40)
>>> t2[0]
1
>>> t2[0] = 30
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> t2[::-1]
(40, 30, 3, 2, 1)
>>> dir(tuple)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclas
shook__', 'count', 'index']
>>> dir(lst)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__'
, '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__'
, '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
 '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__'
, '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort
']
>>> lst = [1,1,1,2]
>>> s1 = set(lst)
>>> s1
{1, 2}
>>> list(s1)
[1, 2]
>>> lst
[1, 1, 1, 2]
>>> o = []
>>> for e in lst:
...     if e not in o:
...             o.append(e)
...
>>> o
[1, 2]
>>> list(set(lst))
[1, 2]
>>> s1 = {1,2,3,4}
>>> len(s1)
4
>>> 3 in s1
True
>>> 3 not in s1
False
>>> s1 == {4,2,3,1}
True
>>> for e in s1:
...     print(e)
...
1
2
3
4
>>> s2 = {2,6,7}
>>> s1 | s2
{1, 2, 3, 4, 6, 7}
>>> s1 & s2
{2}
>>> s1 &~ s2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bad operand type for unary ~: 'set'
>>> s1 ^ s2
{1, 3, 4, 6, 7}
>>> (s1-s2) | (s2-s1)
{1, 3, 4, 6, 7}
>>> s1 - s2
{1, 3, 4}
>>> s1
{1, 2, 3, 4}
>>> s1[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
>>> s1.append(30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'set' object has no attribute 'append'
>>> s1.add(30)
>>> s1
{1, 2, 3, 4, 30}
>>> dir(set)
['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__ian
d__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixo
r__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__',
'__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '_
_setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__',
'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersect
ion', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'rem
ove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']
>>> help(list.extend)
Help on method_descriptor:

extend(self, iterable, /)
    Extend list by appending elements from the iterable.

>>> # Create a list of sets - each set contains two elements(eg numbers)
>>> [ {1,2}, {3,4}]
[{1, 2}, {3, 4}]
>>> # Create a set of list - each list contains two elements(eg numbers)
>>> { [1,2], [3,4]}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> {1,1,1,3}
{1, 3}
>>> hash(1)
1
>>> hash("OK")
3613801450058609964
>>> hash([1,2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> hash((1,2))
3713081631934410656
>>> { (1,2), (3,4)}
{(1, 2), (3, 4)}
>>> s = "OK"
>>> s1 = 'OK'
>>> sr = r"OK"
>>> sb = b"OK"
>>> su = u"OK"
>>> type(sr), type(sb), type(su)
(<class 'str'>, <class 'bytes'>, <class 'str'>)
>>> len("\n")
1
>>> len(r"\n")
2
>>> "D:\Desktop\PPT\python\2.initial-reference\ToBeShared"
'D:\\Desktop\\PPT\\python\x02.initial-reference\\ToBeShared'
>>> r"D:\Desktop\PPT\python\2.initial-reference\ToBeShared"
'D:\\Desktop\\PPT\\python\\2.initial-reference\\ToBeShared'
>>> s = "Hello World"
>>> s.encode("utf-16")
b'\xff\xfeH\x00e\x00l\x00l\x00o\x00 \x00W\x00o\x00r\x00l\x00d\x00'
>>> s.encode("utf-16").decode("utf-16")
'Hello World'
>>> dir(bytes)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__'
, '__str__', '__subclasshook__', 'capitalize', 'center', 'count', 'decode', 'end
swith', 'expandtabs', 'find', 'fromhex', 'hex', 'index', 'isalnum', 'isalpha', '
isascii', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust'
, 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rj
ust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'st
rip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '_
_eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs
__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__'
, '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__'
, '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'e
ncode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isal
num', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', '
isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lo
wer', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust',
 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> set(dir(str)) - set(dir(bytes))
{'casefold', 'isnumeric', 'isprintable', 'format_map', 'isidentifier', 'encode',
 'isdecimal', 'format'}
>>> set(dir(bytes)) - set(dir(str))
{'decode', 'hex', 'fromhex'}
>>>
>>> d = { 'nok' : 1, 'ok': 2}
>>> ed = {}
>>> type(ed)
<class 'dict'>
>>> es = set()
>>> type(es)
<class 'set'>
>>> len(d)
2
>>> "ok" in d
True
>>> "ok" not in d
False
>>> d["nok"]
1
>>> d["nok"] = d["nok"] + 1
>>> for k in d:
...     print(k, d[k])
...
nok 2
ok 2
>>> del d["nok"]
>>> d
{'ok': 2}
>>> lst = [1,2,3]
>>> del lst[0]
>>> lst
[2, 3]
>>> d.key()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'key'
>>> d.keys()
dict_keys(['ok'])
>>> d.values()
dict_values([2])
>>> d.items()
dict_items([('ok', 2)])
>>> dir(dict)
['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__'
, '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__',
 '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '
__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__seta
ttr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'co
py', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update
', 'values']
>>> for k in d:
...     print(k, d[k])
...
ok 2
>>> for k in d.keys():
...     print(k, d[k])
...
ok 2
>>> for e in d.items():
...     print(e[0],e[1])
...
ok 2
>>> for k, v in d.items():
...     print(k, v)
...
ok 2
>>> d = { 'nok' : 1, 'ok': 2}
>>> ed = {}
>>> len(d)
2
>>> "ok" in d
True
>>> d["nok"]
1
>>> d["nok"] = d["nok"] + 1
>>> d["new"] = 10
>>> d
{'nok': 2, 'ok': 2, 'new': 10}
>>>
>>>
>>> d = {"ok" : 10, "nok" : 20}
>>> c = 0
>>> while c < 3:
...     d = { "ok" : [d]}
...     c += 1
...
>>> d
{'ok': [{'ok': [{'ok': [{'ok': 10, 'nok': 20}]}]}]}
>>> import pprint
>>> pprint.pprint(d)
{'ok': [{'ok': [{'ok': [{'nok': 20, 'ok': 10}]}]}]}
>>> # Can you update 'nok' value to 40?
>>> d.update({'nok':40})
>>> d
{'ok': [{'ok': [{'ok': [{'ok': 10, 'nok': 20}]}]}], 'nok': 40}
>>> d = {'ok': [{'ok': [{'ok': [{'ok': 10, 'nok': 20}]}]}]}
>>> type(d)
<class 'dict'>
>>> d.keys()
dict_keys(['ok'])
>>> d['ok']
[{'ok': [{'ok': [{'ok': 10, 'nok': 20}]}]}]
>>> type(d['ok'])
<class 'list'>
>>> len(d['ok']
... )
1
>>>
>>> d['ok'][0]
{'ok': [{'ok': [{'ok': 10, 'nok': 20}]}]}
>>> d['ok'][0]['ok'][0]['ok'][0]['nok'] = 40
>>> d
{'ok': [{'ok': [{'ok': [{'ok': 10, 'nok': 40}]}]}]}
>>> #https://github.com/ndas1971/Py-DayToDay.git
>>> #https://github.com/ndas1971/PyQs/blob/master/python-initial-reference.zip
>>>
>>>
>>> dc = [ ("abc", 2, 23.2), ("xyz", 3, 40.2)]
>>> #dc_out = [ ("abc", 2, 23.2*1.1), ("xyz", 3, 40.2*1.1)]
>>> dc_out = []
>>> for t in dc:
...     dc_out.append(  ( t[0], t[1], t[2]*1.1) )
...
>>> dc_out
[('abc', 2, 25.52), ('xyz', 3, 44.220000000000006)]
>>> dc_out = []
>>> for n,a,s in dc:
...     dc_out.append(  ( n, a, s*1.1) )
...
>>> dc_out
[('abc', 2, 25.52), ('xyz', 3, 44.220000000000006)]
>>>
>>> list(zip( ['a', 'b'], [20,30]))
[('a', 20), ('b', 30)]
>>> list(enumerate(['a', 'b']))
[(0, 'a'), (1, 'b')]
>>> for t in enumerate(['a', 'b']):
...     print(t[0])
...
0
1
>>> sum([1,2,3,4])
10
>>> 322 % 255
67
>>> int("AB", base=16)
171
>>> list(zip( ['a', 'b'], [20,30]))
[('a', 20), ('b', 30)]
>>> input="ABCDEF1234567890"
>>> input[::2]
'ACE13579'
>>> input[1::2]
'BDF24680'
>>> list(zip(input[::2], input[1::2]))
[('A', 'B'), ('C', 'D'), ('E', 'F'), ('1', '2'), ('3', '4'), ('5', '6'), ('7', '
8'), ('9', '0')]
>>> out = []
>>> for f,s in list(zip(input[::2], input[1::2])):
...     out.append( int(f+s, base=16) )
...
>>> out
[171, 205, 239, 18, 52, 86, 120, 144]
>>> sum(out) % 255
15
>>> sum([ int(f+s, base=16) ]) % 255
144
>>> sum([ int(f+s, base=16) for f,s in list(zip(input[::2], input[1::2])) ]) % 2
55
15
>>> list(zip( ['a', 'b'], [20,30]))
[('a', 20), ('b', 30)]
>>> list(zip( ['a', 'b'], [20]))
[('a', 20)]
>>>
>>>
